// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package facedetection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FaceDetServiceClient is the client API for FaceDetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceDetServiceClient interface {
	Predict(ctx context.Context, in *FaceDetRequest, opts ...grpc.CallOption) (*FaceDetResponse, error)
}

type faceDetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceDetServiceClient(cc grpc.ClientConnInterface) FaceDetServiceClient {
	return &faceDetServiceClient{cc}
}

func (c *faceDetServiceClient) Predict(ctx context.Context, in *FaceDetRequest, opts ...grpc.CallOption) (*FaceDetResponse, error) {
	out := new(FaceDetResponse)
	err := c.cc.Invoke(ctx, "/FaceDetection.FaceDetService/predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceDetServiceServer is the server API for FaceDetService service.
// All implementations must embed UnimplementedFaceDetServiceServer
// for forward compatibility
type FaceDetServiceServer interface {
	Predict(context.Context, *FaceDetRequest) (*FaceDetResponse, error)
	mustEmbedUnimplementedFaceDetServiceServer()
}

// UnimplementedFaceDetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFaceDetServiceServer struct {
}

func (UnimplementedFaceDetServiceServer) Predict(context.Context, *FaceDetRequest) (*FaceDetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedFaceDetServiceServer) mustEmbedUnimplementedFaceDetServiceServer() {}

// UnsafeFaceDetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceDetServiceServer will
// result in compilation errors.
type UnsafeFaceDetServiceServer interface {
	mustEmbedUnimplementedFaceDetServiceServer()
}

func RegisterFaceDetServiceServer(s *grpc.Server, srv FaceDetServiceServer) {
	s.RegisterService(&_FaceDetService_serviceDesc, srv)
}

func _FaceDetService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceDetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceDetServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FaceDetection.FaceDetService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceDetServiceServer).Predict(ctx, req.(*FaceDetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceDetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FaceDetection.FaceDetService",
	HandlerType: (*FaceDetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predict",
			Handler:    _FaceDetService_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facedetection/face_detection.proto",
}
